// Code generated by protoc-gen-go. DO NOT EDIT.
// source: compare.proto

package protocmp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BenchMarkStruct struct {
	Int                  int32             `protobuf:"varint,1,opt,name=Int,proto3" json:"Int,omitempty"`
	Uint                 uint32            `protobuf:"varint,2,opt,name=Uint,proto3" json:"Uint,omitempty"`
	Float                float32           `protobuf:"fixed32,3,opt,name=Float,proto3" json:"Float,omitempty"`
	Double               float64           `protobuf:"fixed64,4,opt,name=Double,proto3" json:"Double,omitempty"`
	Bool                 bool              `protobuf:"varint,5,opt,name=Bool,proto3" json:"Bool,omitempty"`
	String_              string            `protobuf:"bytes,6,opt,name=String,proto3" json:"String,omitempty"`
	Array                []int32           `protobuf:"varint,7,rep,packed,name=Array,proto3" json:"Array,omitempty"`
	Map                  map[string]uint32 `protobuf:"bytes,8,rep,name=Map,proto3" json:"Map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Child                *BenchChild       `protobuf:"bytes,9,opt,name=child,proto3" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BenchMarkStruct) Reset()         { *m = BenchMarkStruct{} }
func (m *BenchMarkStruct) String() string { return proto.CompactTextString(m) }
func (*BenchMarkStruct) ProtoMessage()    {}
func (*BenchMarkStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_compare_1b025593311148f1, []int{0}
}
func (m *BenchMarkStruct) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BenchMarkStruct.Unmarshal(m, b)
}
func (m *BenchMarkStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BenchMarkStruct.Marshal(b, m, deterministic)
}
func (dst *BenchMarkStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BenchMarkStruct.Merge(dst, src)
}
func (m *BenchMarkStruct) XXX_Size() int {
	return xxx_messageInfo_BenchMarkStruct.Size(m)
}
func (m *BenchMarkStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_BenchMarkStruct.DiscardUnknown(m)
}

var xxx_messageInfo_BenchMarkStruct proto.InternalMessageInfo

func (m *BenchMarkStruct) GetInt() int32 {
	if m != nil {
		return m.Int
	}
	return 0
}

func (m *BenchMarkStruct) GetUint() uint32 {
	if m != nil {
		return m.Uint
	}
	return 0
}

func (m *BenchMarkStruct) GetFloat() float32 {
	if m != nil {
		return m.Float
	}
	return 0
}

func (m *BenchMarkStruct) GetDouble() float64 {
	if m != nil {
		return m.Double
	}
	return 0
}

func (m *BenchMarkStruct) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

func (m *BenchMarkStruct) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *BenchMarkStruct) GetArray() []int32 {
	if m != nil {
		return m.Array
	}
	return nil
}

func (m *BenchMarkStruct) GetMap() map[string]uint32 {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *BenchMarkStruct) GetChild() *BenchChild {
	if m != nil {
		return m.Child
	}
	return nil
}

type BenchChild struct {
	Int                  int32    `protobuf:"varint,1,opt,name=Int,proto3" json:"Int,omitempty"`
	String_              string   `protobuf:"bytes,2,opt,name=String,proto3" json:"String,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BenchChild) Reset()         { *m = BenchChild{} }
func (m *BenchChild) String() string { return proto.CompactTextString(m) }
func (*BenchChild) ProtoMessage()    {}
func (*BenchChild) Descriptor() ([]byte, []int) {
	return fileDescriptor_compare_1b025593311148f1, []int{1}
}
func (m *BenchChild) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BenchChild.Unmarshal(m, b)
}
func (m *BenchChild) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BenchChild.Marshal(b, m, deterministic)
}
func (dst *BenchChild) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BenchChild.Merge(dst, src)
}
func (m *BenchChild) XXX_Size() int {
	return xxx_messageInfo_BenchChild.Size(m)
}
func (m *BenchChild) XXX_DiscardUnknown() {
	xxx_messageInfo_BenchChild.DiscardUnknown(m)
}

var xxx_messageInfo_BenchChild proto.InternalMessageInfo

func (m *BenchChild) GetInt() int32 {
	if m != nil {
		return m.Int
	}
	return 0
}

func (m *BenchChild) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func init() {
	proto.RegisterType((*BenchMarkStruct)(nil), "protocmp.BenchMarkStruct")
	proto.RegisterMapType((map[string]uint32)(nil), "protocmp.BenchMarkStruct.MapEntry")
	proto.RegisterType((*BenchChild)(nil), "protocmp.BenchChild")
}

func init() { proto.RegisterFile("compare.proto", fileDescriptor_compare_1b025593311148f1) }

var fileDescriptor_compare_1b025593311148f1 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0x4d, 0x4b, 0xc3, 0x40,
	0x14, 0xe4, 0x25, 0x4d, 0x4d, 0x5e, 0x29, 0xca, 0x52, 0x64, 0xf1, 0xb4, 0xe4, 0xb4, 0x78, 0xc8,
	0xa1, 0x4a, 0x11, 0x6f, 0xd6, 0x0f, 0xf0, 0x90, 0xcb, 0x2b, 0xfe, 0x80, 0x6d, 0x0c, 0x36, 0x34,
	0xcd, 0x86, 0x65, 0x23, 0xe4, 0xe7, 0xf9, 0xcf, 0x64, 0x37, 0x29, 0x95, 0xe2, 0x69, 0x67, 0xd8,
	0x79, 0xc3, 0xcc, 0xe0, 0xbc, 0xd0, 0x87, 0x56, 0x99, 0x32, 0x6b, 0x8d, 0xb6, 0x9a, 0xc5, 0xfe,
	0x29, 0x0e, 0x6d, 0xfa, 0x13, 0xe0, 0xe5, 0xba, 0x6c, 0x8a, 0x5d, 0xae, 0xcc, 0x7e, 0x63, 0x4d,
	0x57, 0x58, 0x76, 0x85, 0xe1, 0x7b, 0x63, 0x39, 0x08, 0x90, 0x11, 0x39, 0xc8, 0x18, 0x4e, 0x3e,
	0xaa, 0xc6, 0xf2, 0x40, 0x80, 0x9c, 0x93, 0xc7, 0x6c, 0x81, 0xd1, 0x5b, 0xad, 0x95, 0xe5, 0xa1,
	0x00, 0x19, 0xd0, 0x40, 0xd8, 0x35, 0x4e, 0x5f, 0x74, 0xb7, 0xad, 0x4b, 0x3e, 0x11, 0x20, 0x81,
	0x46, 0xe6, 0x1c, 0xd6, 0x5a, 0xd7, 0x3c, 0x12, 0x20, 0x63, 0xf2, 0xd8, 0x69, 0x37, 0xd6, 0x54,
	0xcd, 0x17, 0x9f, 0x0a, 0x90, 0x09, 0x8d, 0xcc, 0x39, 0x3f, 0x19, 0xa3, 0x7a, 0x7e, 0x21, 0x42,
	0x19, 0xd1, 0x40, 0xd8, 0x3d, 0x86, 0xb9, 0x6a, 0x79, 0x2c, 0x42, 0x39, 0x5b, 0xa6, 0xd9, 0xb1,
	0x41, 0x76, 0x96, 0x3e, 0xcb, 0x55, 0xfb, 0xda, 0x58, 0xd3, 0x93, 0x93, 0xb3, 0x5b, 0x8c, 0x8a,
	0x5d, 0x55, 0x7f, 0xf2, 0x44, 0x80, 0x9c, 0x2d, 0x17, 0x67, 0x77, 0xcf, 0xee, 0x8f, 0x06, 0xc9,
	0xcd, 0x0a, 0xe3, 0xe3, 0xb1, 0xdb, 0x60, 0x5f, 0xf6, 0x7e, 0x83, 0x84, 0x1c, 0x74, 0xa9, 0xbe,
	0x55, 0xdd, 0x95, 0xe3, 0x08, 0x03, 0x79, 0x0c, 0x1e, 0x20, 0x5d, 0x21, 0x9e, 0xcc, 0xfe, 0x59,
	0xef, 0xd4, 0x33, 0xf8, 0xdb, 0x73, 0x3b, 0xf5, 0x59, 0xee, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x24, 0xa5, 0xca, 0xa4, 0x9d, 0x01, 0x00, 0x00,
}
